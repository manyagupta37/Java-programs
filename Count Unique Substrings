package DSA3;

public class countUniqueSubstrings {
    static class node{
        node[] children;
        boolean eow;
        public node()
        {
            children=new node[26];
            eow=false;
        }
    }
    static node root=new node();
    public static void insert(String word)
    {
        node curr=root;
        word=word.toLowerCase();
        for(int i=0;i<word.length();i++)
        {
            int index=word.charAt(i)-'a';
            if(curr.children[index]==null)
            {
                curr.children[index]=new node();

            }
            if(i==word.length()-1)
            {
                curr.children[index].eow=true;
            }
            curr=curr.children[index];
        }

    }
    public static boolean search(String word)
    {
        node curr=root;
        word=word.toLowerCase();
        for(int i=0;i<word.length();i++)
        {
            int index=word.charAt(i)-'a';
            if(curr.children[index]==null)
            {
                return false;

            }
            if(i==word.length()-1 && curr.children[index].eow==false)
            {
                return false;
            }
            curr=curr.children[index];
        }
        return true;
    }
    public static int countNodes(node root)

    {
        if(root==null)
        {
            return 0;
        }
        int count=0;
        for(int i=0;i<26;i++) {
            if (root.children[i] != null) {
                count += countNodes(root.children[i]);
            }
        }return count+1;
    }
    public static void main(String[] args) {
        String str="apple";
        for(int i=0;i<str.length();i++)
        {
            String suffix=str.substring(i);
            insert(suffix);
        }
        System.out.println(countNodes(root));
    }

}
