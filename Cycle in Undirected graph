class Solution {
    // Function to detect cycle in an undirected graph.
    public boolean isCycle(ArrayList<ArrayList<Integer>> adj) {
        // Code here
        int V=adj.size();
        boolean[]visited=new boolean[V];
        for(int i=0;i<V;i++)
        {
            if(!visited[i] && helper(adj,i,visited,-1))
            {
                return true;
            }
        }
        return false;
    }
    public boolean helper(ArrayList<ArrayList<Integer>>graph,int curr, boolean[]visited,int parent)
    {
        visited[curr]=true;
        for(int neighbor:graph.get(curr))
        {
            if(visited[neighbor] && parent!=neighbor)
            {
                return true;
            }
            if(!visited[neighbor])
            {
                if(helper(graph,neighbor,visited,curr))
                {
                    return true;
                }
            }
        }
        return false;
    }
}
