class Solution {
    // Function to detect cycle in a directed graph.
    public boolean isCyclic(ArrayList<ArrayList<Integer>> adj) {
        // code here'
        int V=adj.size();
        boolean[]recSt=new boolean[V];
        boolean[]visited=new boolean[V];
        
        for(int i=0;i<V;i++)
        {
            if(!visited[i] && helper(adj,i,visited,recSt))
            {
                return true;
            }
        }
        return false;
        
    }
    
    public boolean helper(ArrayList<ArrayList<Integer>>graph,int curr, boolean[]visited,boolean[]recSt)
    {
        visited[curr]=true;
        recSt[curr]=true;
        
        for(int neighbor:graph.get(curr))
        {
            if(recSt[neighbor]==true)
            {
                return true;
            }
            else if(!visited[neighbor])
            {
                if(helper(graph,neighbor,visited,recSt))
                {
                    return true;
                }
            }
            
        }
        recSt[curr]=false;
        
        return false;
    }
}
