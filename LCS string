package DSA3.BinaryTrees;
import java.util.*;
public class LCS_print {
    static int[][]t;
    public static void main(String[] args) {
        String a="abcdef";
        String b="acoehg";
        int n=a.length();
        int m=b.length();
        System.out.println(LCS(a,b,n,m));

    }
    public static String LCS(String a,String b,int n,int m)
    {
        t=new int[n+1][m+1];
        for (int i = 0; i <= n; i++) {
            for (int j = 0; j <= m; j++) {
                if (i == 0 || j == 0) {
                    t[i][j] = 0;
                } else if (a.charAt(i - 1) == b.charAt(j - 1)) {
                    t[i][j] = t[i - 1][j - 1] + 1;
                } else {
                    t[i][j] = Math.max(t[i - 1][j], t[i][j - 1]);
                }
            }
        }
        
        int i=n;
        int j=m;
        StringBuilder s=new StringBuilder();
        while(i>0 && j>0){
            if(a.charAt(i-1)==b.charAt(j-1))
            {
                s.append(a.charAt(i-1));
                i--;
                j--;
            }
            else {
                if(t[i][j-1]>t[i-1][j])
                {
                    j--;
                }
                else {
                    i--;
                }
            }
        }

        return s.reverse().toString();


    }

}
