package DSA3.BinaryTrees;

public class LCS_MEMO {
    static int [][]t;
    public static void main(String[] args) {
        String a="abcdef";
        String b="abcghfe";
        int n=a.length();
        int m=b.length();
        t=new int[n+1][m+1];
        memo(t,-1);
        System.out.println(LCS(a,b,n,m));
    }
    public static void memo(int[][]arr,int val){

        for(int i=0;i<arr.length;i++)
        {
            for(int j=0;j<arr[0].length;j++){
                arr[i][j]=val;
            }
        }

    }
    public static int LCS(String a,String b,int n,int m)
    {

        if(n==0 || m==0)
        {
            return 0;
        }
        if(t[n][m]!=-1)
        {
            return t[n][m];
        }
        if(a.charAt(n-1)==b.charAt(m-1))
        {
           return t[n][m]=1+LCS(a,b,n-1,m-1);
        }
        else {
            return t[n][m]=Math.max(LCS(a,b,n,m-1),LCS(a,b,n-1,m));
        }
    }
}
