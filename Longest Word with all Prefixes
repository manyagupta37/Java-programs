package DSA3;

public class longestWordWithAllPrefixes {
    static class node {
        node[] children;
        boolean eow;

        public node() {
            children = new node[26];
            eow = false;
        }
    }

    static node root = new node();

    public static void insert(String word) {
        node curr = root;
        word = word.toLowerCase();
        for (int i = 0; i < word.length(); i++) {
            int index = word.charAt(i) - 'a';
            if (curr.children[index] == null) {
                curr.children[index] = new node();
            }
            if (i == word.length() - 1) {
                curr.children[index].eow = true;
            }
            curr = curr.children[index];
        }
    }

    public static boolean search(String word) {
        node curr = root;
        word = word.toLowerCase();
        for (int i = 0; i < word.length(); i++) {
            int index = word.charAt(i) - 'a';
            if (curr.children[index] == null) {
                return false;
            }
            if (i == word.length() - 1 && !curr.children[index].eow) {
                curr.children[index].eow = false;
            }
            curr = curr.children[index];
        }
        return true;
    }

    static String ans = "";

    public static void longest(node root, StringBuilder temp) {
        if (root == null) {
            return;
        }
        for (int i = 0; i < 26; i++) {
            if (root.children[i] != null && root.children[i].eow) {
                temp.append((char) (i + 'a'));


                if (temp.length() > ans.length()) {
                    ans = temp.toString();
                }
                longest(root.children[i], temp);
                if (temp.length() > 0) {

                    temp.deleteCharAt(temp.length() - 1);
                }
            }
        }
    }





    public static void main(String[] args) {
        String []words={"a","banana","app","appl","apply","ap","apple"};
        for(String word:words) {
            insert(word);
        }
        longest(root,new StringBuilder(""));
        System.out.println(ans);
    }
}
