 * }
 */
class Solution {
    public int pairSum(ListNode head) {
        int max=Integer.MIN_VALUE;
        int sum=0;
        int s=size(head);
        ListNode m=middle(head);
        ListNode firstHead=head;
        ListNode secondHead=reverse(m);
        for(int i=0;i<s/2;i++)
        {
            sum=firstHead.val+secondHead.val;
            max=Math.max(max,sum);
            firstHead = firstHead.next;
            secondHead = secondHead.next;

        }
        return max;

    }
    public ListNode middle(ListNode head)
    {
        ListNode fast=head;
        ListNode slow=head;
        while(fast!=null && slow!=null)
        {
            fast=fast.next.next;
            slow=slow.next;
        }
        return slow;
    }
    public ListNode reverse(ListNode head)
    {
        ListNode prev=null;
        ListNode curr=head;
        while(curr!=null)
        {
            ListNode next=curr.next;
            curr.next=prev;
            prev=curr;
            curr=next;

        }
        return prev;
    }
    public int size(ListNode head)
    {
        int size=0;
        ListNode temp=head;
        while(temp!=null)
        {
            size++;
            temp=temp.next;
        }
        return size;
    }
}
