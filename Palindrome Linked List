/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode reverse(ListNode head)
    {
        if(head==null)
        {
            return null;
        }

        ListNode prev=null;
        ListNode pres=head;
        ListNode next=pres.next;
        while(pres!=null)
        {
            pres.next=prev;
            prev=pres;
            pres=next;
            if(next!=null)
            {
                next=next.next;
            }
            
        }
        return prev;
    }

    public ListNode middle(ListNode head)
    {
        ListNode slow=head;
        ListNode fast=head;
        while(fast!=null && fast.next!=null)
        {
            slow=slow.next;
            fast=fast.next.next;
        }
        return slow;
    }
    public boolean isPalindrome(ListNode head) {

        

        ListNode mid = middle(head);
        ListNode SecondHead = reverse(mid);
        ListNode reReverse = SecondHead;

        while(head!=null && SecondHead!=null)
        {
            if(head.val != SecondHead.val)
            {
                break;
               
            }
            head=head.next;
            SecondHead=SecondHead.next;

        }
        reverse(reReverse);
        return(head==null || SecondHead==null);
        
    }
}
