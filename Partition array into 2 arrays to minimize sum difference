import java.util.ArrayList;
import java.util.List;

public class Solution {
    boolean[][] t;

    public int minimumDifference(int[] nums) {
        int n = nums.length;
        int range = 0;
        
        // Calculate the total sum of the array
        for (int num : nums) {
            range += num;
        }

        // Check for edge case where range is zero
        if (range == 0) {
            return 0;
        }

        

        List<Integer> v = new ArrayList<>();
        subsetSum(nums, range / 2, n, v);

        int min = Integer.MAX_VALUE;
        for (int i = 0; i < v.size(); i++) {
            min = Math.min(min, range - 2 * v.get(i));
        }
        return min;
    }

    public void subsetSum(int[] arr, int sum, int N, List<Integer> v) {
             t = new boolean[N+1][sum+1];

        // Initialize the dp table
        for (int i = 0; i <= N; i++) {
            for (int j = 0; j <= sum; j++) {
                if (i == 0) {
                    t[i][j] = (j == 0);
                } else {
                    t[i][j] = false;
                }
            }
        }

        // Fill the dp table
        for (int i = 1; i <= N; i++) {
            for (int j = 1; j <= sum; j++) {
                if (arr[i - 1] <= j) {
                    t[i][j] = t[i - 1][j - arr[i - 1]] || t[i - 1][j];
                } else {
                    t[i][j] = t[i - 1][j];
                }
            }
        }

        // Collect all possible subset sums
        for (int j = 0; j <= sum; j++) {
            if (t[N][j]) {
                v.add(j);
            }
        }
    }

    public static void main(String[] args) {
        Solution solution = new Solution();
        int[] nums = {1, 6, 11, 5};
        System.out.println("The minimum difference is " + solution.minimumDifference(nums));
    }
}
