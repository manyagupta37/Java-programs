package DSA3.BinaryTrees;

public class PrintingSCS {
    static int [][]t;
    public static void main(String[] args) {
        String a = "AGGTAB";
        String b = "GXTXAYB";
        System.out.println(SCS(a, b));

    }
    public static String SCS(String a, String b)
    {
        int n=a.length();
        int m=b.length();
        t=new int[n+1][m+1];
        for(int i=0;i<=n;i++)
        {
            for(int j=0;j<=m;j++)
            {
                if(i==0 || j==0)
                {
                    t[i][j]=0;
                }
            }
        }
        for(int i=1;i<=n;i++)
        {
            for(int j=1;j<=m;j++)
            {
                if(a.charAt(i-1)==b.charAt(j-1))
                {
                    t[i][j]=1+t[i-1][j-1];

                }
                else {
                    t[i][j]=Math.max(t[i-1][j],t[i][j-1]);
                }
            }
        }
        int i=n;
        int j=m;
        StringBuilder s=new StringBuilder();
        while(i>0 && j>0)
        {
            if(a.charAt(i-1)==b.charAt(j-1))
            {
                s.append(a.charAt(i-1));
                i--;
                j--;
            }
            else {
                if(t[i][j-1]>t[i-1][j])
                {
                    s.append(b.charAt(j-1));
                    j--;
                }
                else {
                    s.append(a.charAt(i-1));
                    i--;
                }

            }
        }
        while(i>0)
        {
            s.append(a.charAt(i-1));
            i--;
        }
        while(j>0)

        {
            s.append(b.charAt(j-1));
            j--;
        }
        return s.reverse().toString();


    }
}
