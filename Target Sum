class Solution {
    public int findTargetSumWays(int[] nums, int target) {
        int total=0;
        for(int i=0;i<nums.length;i++)
        {
            total+=nums[i];
        }
        if ((target + total) % 2 != 0 || target + total < 0) {
            return 0;
        }
        int sum=(target+total) / 2;
        return countSubsetSum(nums,sum);
    }

    public int countSubsetSum(int[]arr,int sum){
        int N=arr.length;
        if (sum < 0) return 0;
        int[][]t=new int[N+1][sum+1];
        for(int i=0;i<=N;i++)
        {
            for(int j=0;j<=sum;j++)
            {
                if(i==0)
                {
                    t[i][j]=0;
                }
                if(j==0)
                {
                    t[i][j]=1;
                }
            }
        }
        for(int i=1;i<=N;i++)
        {
            for(int j=1;j<=sum;j++)
            {
                if(arr[i-1]<=j)
                {
                    t[i][j]=t[i-1][j-arr[i-1]] + t[i-1][j];
                }
                else
                {
                    t[i][j]=t[i-1][j];
                }
            }
        }
        return t[N][sum];


    }
}
