class Solution {
    // Function to return list containing vertices in Topological order.
    static ArrayList<Integer> topologicalSort(ArrayList<ArrayList<Integer>> adj) {
        // Your code here
        int V=adj.size();
        Stack<Integer>st=new Stack<>();
        boolean[] visited=new boolean[V];
        
        ArrayList<Integer>res=new ArrayList<>();
        
        for(int i=0;i<V;i++)
        
        {
            if(!visited[i])
            {
                helper(adj,i,visited,st);
            }
        }
        
          while(!st.isEmpty())
            {
                res.add(st.pop());
            }
        
        return res;
        
        
    }
    static void helper(ArrayList<ArrayList<Integer>> graph,int curr,boolean[]visited,Stack<Integer>st)
    {
        visited[curr]=true;
        for(int neighbor:graph.get(curr))
        {
            if(!visited[neighbor])
            {
                helper(graph,neighbor,visited,st);
            }
        }
        st.push(curr);
    }
}
