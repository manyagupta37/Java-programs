
class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        List<List<Integer>>res=new ArrayList<>();
        int levels=totalLevels(root);
        for(int i=0;i<levels;i++)
        {
            ArrayList<Integer>list=new ArrayList<>();
            if(i%2==0){
            nthLevel1(root,list,i);
            res.add(list);
            }
            else
            {
                nthLevel2(root,list,i);
                res.add(list);
            }
        }
        return res;
    }
    public int height(TreeNode root)
    {
        if(root==null)
        {
            return -1;

        }
        int lh=height(root.left);
        int rh=height(root.right);

        return Math.max(lh,rh)+1;
    }
    public int totalLevels(TreeNode root)
    {
        return height(root)+1;
    }

    //preorder
    public void nthLevel1(TreeNode root, ArrayList<Integer>list,int n)
    {
        if(root==null)
        {
            return;
        }
        if(n==0)
        {
            list.add(root.val);
            return;
        }
        
        nthLevel1(root.left,list,n-1);
        nthLevel1(root.right,list,n-1);
    }

    //postorder
    public void nthLevel2(TreeNode root, ArrayList<Integer>list,int n)
    {
        if(root==null)
        {
            return;
        }
        if(n==0)
        {
            list.add(root.val);
            return;
        }
        nthLevel2(root.right,list,n-1);
        nthLevel2(root.left,list,n-1);
    }
}
