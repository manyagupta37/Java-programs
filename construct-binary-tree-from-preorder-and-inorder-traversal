/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        HashMap<Integer,Integer>hm=new HashMap<>();
        for(int i=0;i<inorder.length;i++)
        {
            hm.put(inorder[i],i);
        }
        int[] index = {0};
        return helper(preorder,inorder,0,preorder.length-1,hm,index);
    }

    public TreeNode helper(int[] preorder, int[] inorder, int left, int right, HashMap<Integer,Integer>hm, int[]index)
    {
        if(left>right)
        {
            return null;
        }

        int current = preorder[index[0]];
        index[0]++;

        TreeNode node = new TreeNode(current);

        if(left==right)
        {
            return node;
        }

        int currIndex = hm.get(current);
        node.left=helper(preorder,inorder,left,currIndex-1,hm,index);
        node.right=helper(preorder,inorder,currIndex+1,right,hm,index);
        return node;
    }

}
